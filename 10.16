# include <stdio.h>
# include <malloc.h>
# include <stdbool.h>
# include <stdlib.h>

#define _CRT_SECURE_NO_WARNINGS

typedef struct Node
{
	int data; //数据域
	struct Node  *pNext; //指针域
}NODE,*PNODE;



PNODE create_list(); //ok
void traverse_list(PNODE pHead); //ok
bool is_empty(PNODE pHead); //ok
bool is_full(PNODE pHead);
int length_list(PNODE); //ok
bool insert_list(PNODE, int, int);
bool delete_list(PNODE, int, int *);
void sort_list(PNODE);// ok



int main(void)
{
	PNODE pHead = NULL;
	pHead = create_list();
	traverse_list(pHead);
	int len = length_list(pHead);
	printf("len = %d\n", len);
	sort_list(pHead);
	traverse_list(pHead);
	return 0;

}


void traverse_list(PNODE pHead)
{
	
	PNODE p = pHead->pNext;
	while (NULL != p)
	{
		printf("%d ",p->data);
		p = p->pNext;
	}
	printf("\n");
	return;

}


PNODE create_list()
{
	int len;
	int i;
	int val; //用来临时存放用户输入的节点的值

	//分配了一个不存在数据的头结点
	PNODE pHead = (PNODE)malloc(sizeof(NODE));
	if (NULL == pHead)
	{
		printf("动态内存分配失败！");
		exit(-1);
	}
	PNODE pTail = pHead;
	pTail->pNext = NULL; //59,60 生成了一个尾节点

	printf("请输入你需要生成的链表节点的个数:len = ");
	scanf("%d", &len);
	for (i = 0; i < len; ++i)
	{
		printf("请输入第%d个节点的值：", i + 1);
		scanf("%d", &val);

		PNODE pNew = (PNODE)malloc(sizeof(NODE));
		if (NULL == pHead)
		{
			printf("动态内存分配失败！");
			exit(-1);
		}
		pNew->data = val;
		pTail->pNext = pNew;
		pNew->pNext = NULL;
		pTail = pNew;


	}
	return pHead;

}

bool is_empty(PNODE pHead)
{
	if (pHead->pNext == NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}

int length_list(PNODE pHead)
{
	PNODE p = pHead->pNext;
	int len = 0;
	while (NULL != p)
	{
		++len;
		p = p->pNext;
	}
	return len;

}


void sort_list(PNODE pHead)
{
	int i, j, t;
	PNODE p, q;
	int len = length_list(pHead);
	for (i = 0, p = pHead->pNext; i < len - 1; ++i,p = p->pNext)
	{
		for (j = i + 1, q = p->pNext; j < len; ++j, q = q->pNext)
		{
			if (p->data > q->data)
			{
				t = p->data;
				p->data = q->data;
				q->data = t;
			}
		}
	}
	return;
}

bool insert_list(PNODE pHead, int pos, int val)
{
	int i = 0;
	PNODE p = pHead;
	
	while (NULL != p && i < pos - 1)
	{
		p = p->pNext;
		++i;
	}
	if (i>pos - 1 || NULL == p)
	{
		return false;
	}

}
